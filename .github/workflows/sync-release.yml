name: Sync Release to Production

on:
  release:
    types: [published]

jobs:
  sync-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: üöö Checkout development repository
        uses: actions/checkout@v4

      - name: üöö Checkout release repository
        uses: actions/checkout@v4
        with:
          repository: wtl-public/hio-typo3-connector
          path: release-repo
          token: ${{ secrets.RELEASE_REPO_TOKEN }}
          ref: main

      - name: üîÑ Synchronize files
        run: |
          # L√∂scht alte Dateien im geklonten Release-Repo (au√üer .git-Verzeichnis)
          find release-repo -mindepth 1 ! -name '.git' -exec rm -rf {} +
          echo "Verzeichnisinhalt: $(ls -a release-repo)"
          # Kopiert alle Dateien (au√üer .git) vom Entwicklungs- ins Release-Repo
          rsync -av --progress . release-repo/ --exclude .git --exclude .github --exclude release-repo

      - name: ‚¨ÜÔ∏è Commit and push to release repository
        run: |
          cd release-repo
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add .
          # Commit nur, wenn es √Ñnderungen gibt
          if ! git diff --staged --quiet; then
            git commit -m "chore: Sync from development release ${{ github.event.release.tag_name }}"
            git push origin main
          else
            echo "Keine √Ñnderungen zum Committen."
          fi

      - name: üéâ Create Release in release repository
        uses: softprops/action-gh-release@v2
        with:
          repository: wtl-public/hio-typo3-connector
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
          body: ${{ github.event.release.body }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.RELEASE_REPO_TOKEN }}
