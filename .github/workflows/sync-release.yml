name: Sync Release to Production

on:
  release:
    types: [ published ]

jobs:
  sync-and-release:
    runs-on: ubuntu-latest
    permissions:
        contents: write  # Erlaubt das Schreiben in das Repository

    steps:
      # 1. Nur das Entwicklungs-Repo zum Zeitpunkt des Releases auschecken
      - name: üöö Checkout development repository at release tag
        uses: actions/checkout@v4
        # Diese Action checkt automatisch den Commit aus, der zum Release-Tag geh√∂rt

      # 2. Inhalt direkt zum Release-Repo pushen (ohne zweiten Checkout)
      - name: üõ∞Ô∏è Force-push content to release repository
        run: |
          set -e
          echo "Adding new remote 'release_target'..."
          # Wir f√ºgen eine komplett neue Remote hinzu, um jegliche Konflikte mit 'origin' zu vermeiden.
          # Das Token wird sicher direkt in die URL eingebettet.
          git remote add release_target "https://x-access-token:${{ secrets.RELEASE_REPO_TOKEN }}@github.com/${{ vars.RELEASE_REPO_OWNER }}/${{ vars.RELEASE_REPO_NAME }}.git"
          
          echo "Verifying new remote:"
          git remote -v
          # Die Ausgabe muss jetzt 'origin' (Dev-Repo) und 'release_target' (Release-Repo) zeigen

          echo "Force-pushing to the main branch of the release repository..."
          # Wir erzwingen den Push (--force), da die Historie des Release-Repos
          # komplett durch den aktuellen Stand des Entwicklungs-Repos ersetzt werden soll.
          # Das ist f√ºr einen reinen Release-Spiegel der korrekte Ansatz.
          git push release_target HEAD:refs/heads/main --force

      # 3. Das Release-Objekt (Tag, Name, Beschreibung) im Ziel-Repo erstellen
      - name: üéâ Create Release object in release repository
        uses: softprops/action-gh-release@v2
        with:
          # Wir verwenden die Variablen, um das Ziel-Repo anzugeben
          repository: ${{ vars.RELEASE_REPO_OWNER }}/${{ vars.RELEASE_REPO_NAME }}
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
          body: ${{ github.event.release.body }}
          prerelease: ${{ github.event.release.prerelease }}
          # Wichtig: Hier wird weiterhin das Token ben√∂tigt, um das Release zu erstellen
          token: ${{ secrets.RELEASE_REPO_TOKEN }}
